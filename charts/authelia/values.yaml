# Default values for authelia.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: authelia/authelia
  tag: 4
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

authelia:
  logLevel: "trace"
  redirectionURL: "https://home.example.com:8080/"
  totpIssuer: "authelia.com"

  duo:
    enabled: false
    config:
      hostname: api-123456789.example.com
      integration_key: ABCDEF

  ldap:
    enabled: false
    config:
      # The url to the ldap server. Scheme can be ldap:// or ldaps://
      url: ldap://127.0.0.1

      # Skip verifying the server certificate (to allow self-signed certificate).
      skip_verify: false

     # The base dn for every entries
     base_dn: dc=example,dc=com

    # The attribute holding the username of the user. This attribute is used to populate
    # the username in the session information. It was introduced due to #561 to handle case
    # insensitive search queries.
    # For you information, Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP
    # usually uses 'uid'
    # Beware that this attribute holds the unique identifiers for the users binding the user and the configuration
    # stored in database. Therefore only single value attributes are allowed and the value
    # must never be changed once attributed to a user otherwise it would break the configuration
    # for that user. Technically, non-unique attributes like 'mail' can also be used but we don't recommend using
    # them, we instead advise to use the attributes mentioned above (sAMAccountName and uid) to follow
    # https://www.ietf.org/rfc/rfc2307.txt.
    username_attribute: uid
    
    # An additional dn to define the scope to all users
    additional_users_dn: ou=users
    
    # The users filter used in search queries to find the user profile based on input filled in login form.
    # Various placeholders are available to represent the user input and back reference other options of the configuration:
    # - {input} is a placeholder replaced by what the user inputs in the login form. 
    # - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    #
    # Recommended settings are as follows:
    # - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
    # - OpenLDAP: (&({username_attribute}={input})(objectClass=person))' or '(&({username_attribute}={input})(objectClass=inetOrgPerson))
    #
    # To allow sign in both with username and email, one can use a filter like
    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    users_filter: (&({username_attribute}={input})(objectClass=person))
    
    # An additional dn to define the scope of groups
    additional_groups_dn: ou=groups
    
    # The groups filter used in search queries to find the groups of the user.
    # - {input} is a placeholder replaced by what the user inputs in the login form.
    # - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
    # - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
    # - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    # - DON'T USE - {1} is an alias for {username} supported for backward compatibility but it will be deprecated in later version, so please don't use it.
    groups_filter: (&(member={dn})(objectclass=groupOfNames))
    
    # The attribute holding the name of the group
    group_name_attribute: cn
    
    # The attribute holding the mail address of the user
    mail_attribute: mail
    
    # The attribute holding the display name of the user. This will be used to greet an authenticated user.
    display_name_attribute: displayname

    # The username and password of the admin user. If multiple email addresses are defined for a user, only the first
    # one returned by the LDAP server is used.
    user: cn=admin,dc=example,dc=com

    # If LDAP is disabled, you can specify a users database file, however
    # it will be read-only!
  fileAuth:
    users: {}
      # john:
      #   password: "{CRYPT}$6$rounds=500000$jgiCMRyGXzoqpxS3$w2pJeZnnH8bwW3zzvoMWtTRfQYsHbWbD/hquuQ5vUeIyl9gdwBIt6RWk2S6afBA0DPakbeWgD/4SZPiS0hYtU/"
      #   email: john.doe@authelia.com
      #   groups:
      #     - admins
      #     - dev

  # Default policy can either be `bypass`, `one_factor`, `two_factor` or `deny`.
  # It is the policy applied to any resource if there is no policy to be applied
  # to the user.
  accessControl:
    defaultPolicy: deny
    rules:
      # Rules applied to everyone
      - domain: public.example.com
        policy: bypass

      - domain: secure.example.com
        policy: one_factor
        # Network based rule, if not provided any network matches.
        networks:
          - 192.168.1.0/24
      - domain: secure.example.com
        policy: two_factor

      - domain: singlefactor.example.com
        policy: one_factor

      # Rules applied to 'admin' group
      - domain: 'mx2.mail.example.com'
        subject: 'group:admin'
        policy: deny
      - domain: '*.example.com'
        subject: 'group:admin'
        policy: two_factor

      # Rules applied to 'dev' group
      - domain: dev.example.com
        resources:
          - '^/groups/dev/.*$'
        subject: 'group:dev'
        policy: two_factor

      # Rules applied to user 'john'
      - domain: dev.example.com
        resources:
          - '^/users/john/.*$'
        subject: 'user:john'
        policy: two_factor

      # Rules applied to user 'harry'
      - domain: dev.example.com
        resources:
          - '^/users/harry/.*$'
        subject: 'user:harry'
        policy: two_factor

      # Rules applied to user 'bob'
      - domain: '*.mail.example.com'
        subject: 'user:bob'
        policy: two_factor
      - domain: 'dev.example.com'
        resources:
          - '^/users/bob/.*$'
        subject: 'user:bob'
        policy: two_factor

  session:
    # The name of the session cookie. (default: authelia_session).
    name: authelia_session
    # The time in ms before the cookie expires and session is reset.
    expiration: 3600000 # 1 hour
    # The inactivity time in ms before the session is reset.
    inactivity: 300000 # 5 minutes
    # The domain to protect.
    # Note: the authenticator must also be in that domain. If empty, the cookie
    # is restricted to the subdomain of the issuer.
    domain: example.local

  regulation:
    # The number of failed login attempts before user is banned.
    # Set it to 0 to disable regulation.
    max_retries: 3
    # The time range during which the user can attempt login before being banned.
    # The user is banned if the authentication failed `max_retries` times in a `find_time` seconds window.
    find_time: 120
    # The length of time before a banned user can login again.
    ban_time: 300

  notifier: 
  # You can disable the notifier startup check by setting this to true.
    smtpenabled: false
   
  # For testing purpose, notifications can be sent in a file
    filesystem:
      filename: /config/notification.txt
    # Use a SMTP server for sending notifications
    smtp:
      username: test
      secure: false
      host: 127.0.0.1
      port: 1025
      sender: admin@example.com

# Options for Authelia PVC (/var/lib/authelia/store) when not using external DB
persistence:
  annotations: {}
  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  accessMode: ReadWriteOnce
  size: 100Mi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

secrets:
    jwt_secret:
    session_secret:
    duo_secret_key: 1234567890abcdefghifjkl
    redis_password: "authelia"
    DBPassword: authelia
    LDAP_password: password
    smtp_password: password
    
redis:
  enabled: false
  usePassword: false
  host: 
  port: 
  database_index:

externaldb:
  enabled: false
  DBType: 
  DBURL: 
  Database: 
  DBUser: root
  
